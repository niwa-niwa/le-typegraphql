scalar Date

type User implements Node {
  id:ID!
  firebaseId:String!
  isAdmin:Boolean!
  isActive:Boolean!
  isAnonymous:Boolean!
  username:String!
  messages:[Message!]
  villages:[Village!]
  createdAt:Date!
  updatedAt:Date
}

type UserEdge implements Edge {
  node:User!
  cursor: String!
}

type UserConnection implements Connection {
  totalCount: Int!
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
}

type Query {
  getUserDetail(id:ID!):User
  getUsers:[User!]
  getMe:User
  users(
    after:String,
    before:String,
    first:Int,
    last:Int,
    query:String,
    reverse:Boolean,
    sortKey:UserSortKeys
  ):UserConnection!
  user(id:ID!):User!
  me:User!
}

type Mutation {
  createUser(firebaseToken:String!):User
  editUser(id:ID!, isAdmin:Boolean, isActive:Boolean, isAnonymous:Boolean, username:String):User
  deleteUser(id:ID!):User
}

enum UserSortKeys {
  username
  updatedAt
  createdAt
}